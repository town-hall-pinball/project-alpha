#!/usr/bin/env python

# Copyright (c) 2014 - 2015 townhallpinball.org
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import argparse
import json
import sys

import pinproc

parser = argparse.ArgumentParser()
parser.add_argument("machine_type", type=str,
    help="Directly passed to pinproc.decode (e.g., 'wpc')")

args = parser.parse_args()

platform = args.machine_type

numbers = set()
drivers = {
    "coils": {},
    "lamps": {},
    "switches": {},
    "flippers": {},
}
platforms = {
    "wpc": {
        "type": "wpc",
        "polarity": False,
    }
}

def register_driver(driver_type, name, number):
    if number in drivers:
        raise ValueError("Duplicate driver: {}".format(number))
    numbers.add(number)
    drivers[driver_type][name] = number

flipper_names = {
    "lower_left": {
        "main": "FLLM",
        "hold": "FLLH",
    },
    "lower_right": {
        "main": "FLRM",
        "hold": "FLRH",
    },
    "upper_left": {
        "main": "FULM",
        "hold": "FULH",
    },
    "upper_right": {
        "main": "FURM",
        "hold": "FURH",
    }
}

for key, name in names.items():
    number = pinproc.decode(platform, key)
    register_driver("flippers", name, number)

for row in xrange(1, 9):
    name = str(row)
    number = pinproc.decode(platform, "SD" + name)
    register_driver("switches", "D" + name, number)
    register_driver("switches", "F" + name, number)
    for col in xrange(1, 9):
        name = "{}{}".format(col, row)
        number = pinproc.decode(platform, "S" + name)
        register_driver("switches", name, number)
        number = pinproc.decode(platform, "L" + name)
        register_driver("lamps", name, number)

for coil in xrange(1, 45):
    name = "{:02d}".format(coil)
    number = pinproc.decode(platform, "C" + name)
    register_driver("coils", name, number)

print json.dumps({
    "controller": {
        "class_name": "pinlib.controllers.PROC",
        "map": drivers,
    },
    "platform": platforms[platform],
}, indent=4, separators=(",", ": "))




